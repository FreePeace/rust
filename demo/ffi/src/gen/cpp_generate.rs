/* automatically generated by rust-bindgen 0.69.4 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct Data {
        pub a: ::std::os::raw::c_int,
        pub d: ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_Data() {
        const UNINIT: ::std::mem::MaybeUninit<Data> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(::std::mem::size_of::<Data>(), 8usize, concat!("Size of: ", stringify!(Data)));
        assert_eq!(::std::mem::align_of::<Data>(), 4usize, concat!("Alignment of ", stringify!(Data)));
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
            0usize,
            concat!("Offset of field: ", stringify!(Data), "::", stringify!(a))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
            4usize,
            concat!("Offset of field: ", stringify!(Data), "::", stringify!(d))
        );
    }
    extern "C" {
        pub fn f_int(i: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn f_int_ref(i: *mut ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn f_int_p(p: *mut ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn f_char(c: ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn f_char_ref(c: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn f_char_p(p: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn f_data(d: root::Data);
    }
    extern "C" {
        pub fn f_data_ref(d: *mut root::Data);
    }
    extern "C" {
        pub fn f_data_p(d: *mut root::Data);
    }
}
